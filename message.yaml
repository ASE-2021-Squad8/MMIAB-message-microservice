openapi: "3.0.1"
info:
  title: Message Service API
  description: Message Microservice of Message in a Bottle Application
  version: "0.1"

servers:
  - url: /api

paths:
  /message:
    post:
      summary: Save and schedule a new message to send
      tags:
        - Message
      operationId: send_message
      requestBody:
        description: Create a new message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSave'
      responses:
        201:
          description: Created
        404:
          description: User does not exists
        default:
          description: Error during creation of the user
    put:
      tags: [Message]
      summary: Updates the message state
      operationId: mib.resources.message.update_state
      requestBody:
        description: Update message state
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageState'
      responses:
        200:
          description: Message state updated
        404:
          description: Message not found
        default:
          description: An error occured during the message state updating

  /message/{message_id}:
    get:
      tags: [ Message ]
      summary: Get a message by id
      operationId: get_message
      parameters:
        - name: message_id
          description: Message Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return message
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Message'
        404:
          description: Message not found
        default:
          description: An error occured during retrieving the message

  /message/{user_id}/received/metadata:
    get:
      tags: [ Message ]
      summary: Get all received messages metadata of an user
      operationId: get_all_messages_received_metadata
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return messages
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageMetadata'
        404:
          description: User not found
        default:
          description: An error occured during retrieving the metadata
  
  /message/{user_id}/sent/metadata:
    get:
      tags: [ Message ]
      summary: Get all sent messages metadata of an user
      operationId: get_all_messages_sent_metadata
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return messages
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageMetadata'
        404:
          description: User not found
        default:
          description: An error occured during retrieving the metadata
  
  /message/draft/{draft_id}:
    get:
      tags:
        - Draft
      summary: Get a draft by id
      operationId: get_draft
      parameters:
        - name: draft_id
          description: Message Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return the draft
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Draft'
        404:
          description: Draft not found
        default:
          description: An error occured during retrieving the draft
    put:
      tags:
        [Draft]
      summary: Updates a draft
      operationId: update_draft
      parameters:
        - name: draft_id
          description: Message Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update draft state
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Draft'
      responses:
        200:
          description: Draft updated
        404:
          description: Draft not found
    delete:
      tags:
        [Draft]
      summary: Delete a draft by id
      operationId: delete_draft
      parameters:
        - name: draft_id
          description: Message Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Delete the draft
        404:
          description: Draft not found
        default:
          description: An error occured during retrieving the draft
  
  /message/{message_id}/attachment:
    get:
      tags:
        [Message]
      summary: Retrieves an attachment for a message
      operationId: get_message_attachment
      parameters:
        - name: message_id
          description: Message Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The attachment
          content:
            application/json:
              schema:
                type: object
                properties:
                  media:
                    type: string
                    format: binary
                    description: Attachment
        404:
          description: Message not found
    
  /message/{user_id}/sent/{day}/{month}/{year}:
    get:
      tags:
        [Message]
      summary: Gets all messages sent in a time interval (includes yet to be delivered)
      operationId: get_daily_message
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: day
          description: day
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 31
        - name: month
          description: month
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 12
        - name: year
          description: year
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1900
      responses:
        200:
          description: Returns a JSON array with messages
          content:
            application/json:
              schema: 
                type: array
                items:
                  properties:
                    message_id:
                      type: integer
                      format: int64
                      example: 1
                    firstname: 
                      type: string
                      example: mario
                    email: 
                      type: string
                      format: email
                      example: mario.rossi@example.org
                    text:
                      type: string
                      example: 'Hi mate!'
                    delivered:
                      type: boolean
                      example: false
                    candelete: 
                      type: boolean
                      example: true
                    future:
                      type: boolean
                      example: true
        404:
          description: User id not found
        default:
          description: Something went wrong
  
  /lottery/{message_id}:
    delete:
      tags:
        [Message]
      summary: Delete a message spending points
      operationId: spend_points
      parameters:
        - name: message_id
          description: Message Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Message deleted
        400:
          description: Message already sent
        401:
          description: Not enough points
        404:
          description: Message not found
  
  /message/draft:
    post:
      summary: Save a new draft
      tags:
        - Draft
      operationId: save_draft
      requestBody:
        description: Create a new draft
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftSave'
      responses:
        200:
          description: Draft saved
        default:
          description: An error occured while saving the draft
 
  /message/{user_id}/draft:
    get:
      summary: Retrieve all user's drafts
      tags:
        - Draft
      operationId: get_all_users_drafts
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageMetadata'
          description: Return all user's draft
      
  
components:
  schemas:
    Message:
      required:
        - text
        - sender
        - recipient
        - media
        - delivery_date
        - is_draft
        - is_delivered
        - is_read
        - is_deleted
      type: object
      properties:
        text:
          type: string
          description: message body
          example: 'Hi mate!'
        sender:
          type: integer
          description: sender's id
          example: 1
        recipient:
          type: integer
          description: recipient's id
          example: 2
        media:
          type: string
          format: binary
          description: Attachment
        delivery_date:
          type: string
          description: when the message will be sent
          example: '2021-11-21T16:15'
          format: date
        is_draft:
          type: boolean 
          description: states if a message is a draft
          example: true
        is_delivered:
          type: boolean 
          description: states if a message has been delivered
          example: true
        is_read:
          type: boolean 
          description: states if a message has been read
          example: true
        is_deleted:
          type: boolean 
          description: states if a message has been deleted on recipient side
          example: true

    Draft:
      required:
        - text
        - sender
        - recipient
        - media
      type: object
      properties:
        text:
          type: string
          description: message body
          example: 'Hi mate!'
        sender:
          type: integer
          description: sender's id
          example: 1
        recipient:
          type: integer
          description: recipient's id
          example: 2
        media:
          type: string
          format: binary
          description: Attachment

    MessageState:
      required:
        - message_id
        - attribute
        - value
      type: object
      properties:
        message_id:
          type: integer
          description: message id
          example: 1
          format: int64
        attribute:
          type: string
          description: message attribute
          example: 'is_deleted'
        value:
          type: boolean
          description: new state
          example: true
          
    MessageMetadata:
      required:
        - sender
        - recipient
        - media
      type: object
      properties:
        sender:
          type: integer
          description: sender's id
          example: 1
        recipient:
          type: integer
          description: recipient's id
          example: 2
        has_media:
          type: boolean
          description: true if the message has an attachment
          example: true
          
    MessageSave:
      required:
        - text
        - sender
        - recipient
        - media
        - delivery_date
        - is_draft
      type: object
      properties:
        text:
          type: string
          description: message body
          example: 'Hi mate!'
        sender:
          type: integer
          description: sender's id
          example: 1
        recipient:
          type: integer
          description: recipient's id
          example: 2
        media:
          type: string
          format: binary
          description: Attachment
        delivery_date:
          type: string
          description: when the message will be sent
          example: '2021-11-21T16:15'
          format: date
        is_draft:
          type: boolean 
          description: states if a message is a draft
          example: true
          
    DraftSave:
      required:
        - sender
      type: object
      properties:
        text:
          type: string
          description: message body
          example: 'Hi mate!'
        sender:
          type: integer
          description: sender's id
          example: 1
        recipient:
          type: integer
          description: recipient's id
          example: 2
        media:
          type: string
          format: binary
          description: Attachment
        delivery_date:
          type: string
          description: when the message will be sent
          example: '2021-11-21T16:15'
          format: date